{"version":3,"file":"ngx-gantt-chart.mjs","sources":["../../../projects/ngx-gantt-chart/src/lib/ngx-gantt-chart.service.ts","../../../projects/ngx-gantt-chart/src/lib/ngx-gantt-chart.component.ts","../../../projects/ngx-gantt-chart/src/lib/ngx-gantt-chart.component.html","../../../projects/ngx-gantt-chart/src/lib/ngx-gantt-chart.module.ts","../../../projects/ngx-gantt-chart/src/public-api.ts","../../../projects/ngx-gantt-chart/src/ngx-gantt-chart.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NgxGanttChartModule } from './ngx-gantt-chart.module';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n//   providedIn: NgxGanttChartModule,\r\n// })\r\n@Injectable()\r\nexport class NgxGanttChartService {\r\n  constructor() {}\r\n\r\n  /** Given a start and end date return the difference in months */\r\n  static monthDiff(dateFrom: Date, dateTo: Date): number {\r\n    dateFrom = new Date(dateFrom);\r\n    dateTo = new Date(dateTo);\r\n    return (\r\n      dateTo.getMonth() -\r\n      dateFrom.getMonth() +\r\n      12 * (dateTo.getFullYear() - dateFrom.getFullYear())\r\n    );\r\n  }\r\n\r\n  /** Given a start and end date return the difference in days */\r\n  static dateDifference(\r\n    endDate: Date,\r\n    startDate: Date,\r\n    inlusiveOfEndDate: boolean = false\r\n  ): number {\r\n    endDate = new Date(endDate);\r\n    startDate = new Date(startDate);\r\n\r\n    const _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n\r\n    // Discard the time and time-zone information.\r\n    const utc1 = Date.UTC(\r\n      endDate.getFullYear(),\r\n      endDate.getMonth(),\r\n      endDate.getDate()\r\n    );\r\n    const utc2 = Date.UTC(\r\n      startDate.getFullYear(),\r\n      startDate.getMonth(),\r\n      startDate.getDate()\r\n    );\r\n\r\n    return (\r\n      Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY)) +\r\n      (inlusiveOfEndDate ? 2 : 1)\r\n    );\r\n  }\r\n\r\n  /** This method will give you a month name based on a month number */\r\n  static getMonthName(date: Date): string {\r\n    return new Intl.DateTimeFormat('en-US', { month: 'short' }).format(date);\r\n  }\r\n\r\n  /** Given a date this method will return the number of days in the specified month */\r\n  static daysInMonth(date: Date): number {\r\n    date = new Date(date);\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\r\n  }\r\n\r\n  static addMonths(date: Date, monthsToAdd: number): Date {\r\n    date = new Date(date);\r\n    // always assume just shifting one month across so set date to first day of month\r\n    const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    return new Date(\r\n      firstDayOfMonth.setMonth(monthsToAdd + firstDayOfMonth.getMonth())\r\n    );\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { IGanttCharRow } from './models/IGanttCharRow';\r\nimport { IGanttChartEvent } from './models/IGanttChartEvent';\r\nimport { NgxGanttChartService } from './ngx-gantt-chart.service';\r\nimport { MonthAxis } from './models/MonthAxis';\r\n\r\n@Component({\r\n  selector: 'ngx-gantt-chart',\r\n  templateUrl: 'ngx-gantt-chart.component.html',\r\n  styleUrls: ['ngx-gantt-chart.component.css'],\r\n})\r\nexport class NgxGanttChartComponent {\r\n  @Input() rows: IGanttCharRow[] = [];\r\n  @Input() startDate: Date = new Date('2021-01-01');\r\n  @Input() endDate: Date = new Date('2021-04-30');\r\n\r\n  chartPeriodDays: number;\r\n  monthAxis: MonthAxis[];\r\n  colourPallete = [\r\n    '#7C4DFF',\r\n    '#81c784',\r\n    '#e53935',\r\n    '#FF8A80',\r\n    '#303F9F',\r\n    '#40C4FF',\r\n    '#006064',\r\n    '#FF8A65',\r\n  ];\r\n\r\n  constructor() {\r\n    this.chartPeriodDays = NgxGanttChartService.dateDifference(\r\n      this.endDate,\r\n      this.startDate,\r\n      true\r\n    );\r\n    this.monthAxis = this.getMonths(this.startDate, this.endDate);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /** Given an event calculate the percentage of days over the total gantt chart period */\r\n  getEventDurationPercentage(event: IGanttChartEvent): number {\r\n    const eventDays = NgxGanttChartService.dateDifference(\r\n      event.endDate,\r\n      event.startDate\r\n    );\r\n    return (eventDays / this.chartPeriodDays) * 100;\r\n  }\r\n\r\n  /** Given an date the percentage of days over the total gantt chart period */\r\n  getEventOffsetPercentage(eventStartDate: Date): number {\r\n    const daysPriorToEventStart = NgxGanttChartService.dateDifference(\r\n      eventStartDate,\r\n      this.startDate\r\n    );\r\n    return ((daysPriorToEventStart - 1) / this.chartPeriodDays) * 100;\r\n  }\r\n\r\n  /** Given a start and end date will return full months between period along with month names and\r\n   * relative duration percentages for each month\r\n   */\r\n  getMonths(startDate: Date, endDate: Date): MonthAxis[] {\r\n    const startMonth = startDate.getMonth();\r\n    const endMonth = endDate.getMonth();\r\n    const totalDurationDays = NgxGanttChartService.dateDifference(\r\n      startDate,\r\n      endDate,\r\n      true\r\n    );\r\n    const months: MonthAxis[] = [];\r\n\r\n    let i = 0;\r\n    const iMax = endMonth - startMonth;\r\n\r\n    for (i; i <= iMax; i++) {\r\n      const adjustedStartDate = NgxGanttChartService.addMonths(startDate, i);\r\n      const monthName = NgxGanttChartService.getMonthName(adjustedStartDate);\r\n      const daysInMonth = NgxGanttChartService.daysInMonth(adjustedStartDate);\r\n      const monthDurationPercentage = (daysInMonth / totalDurationDays) * 100;\r\n      months.push({\r\n        monthName: monthName,\r\n        monthDurationPercentage: monthDurationPercentage,\r\n      });\r\n    }\r\n    return months;\r\n  }\r\n\r\n  /** Given colour for */\r\n  getColour(rowIndex: number): string {\r\n    if (this.rows.length < rowIndex) {\r\n      return '#64b5f6';\r\n    }\r\n\r\n    return this.colourPallete[rowIndex];\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <!-- header row-->\r\n  <div class=\"row-axis\">\r\n    <div class=\"row-title\">Activities</div>\r\n    <div class=\"month-axis\">\r\n      <span\r\n        class=\"month\"\r\n        *ngFor=\"let month of monthAxis\"\r\n        [style.width]=\"month.monthDurationPercentage + '%'\"\r\n      >\r\n        {{ month.monthName }}</span\r\n      >\r\n    </div>\r\n  </div>\r\n\r\n  <!-- gantt chart rows-->\r\n  <div class=\"gantt-chart-row\" *ngFor=\"let row of rows; let i = index\">\r\n    <div class=\"row-title\">\r\n      {{ row.name }}\r\n    </div>\r\n    <div class=\"row-events\">\r\n      <!-- event period blocks-->\r\n      <div\r\n        class=\"event-period tooltip\"\r\n        *ngFor=\"let event of row.events\"\r\n        [style.margin-left]=\"getEventOffsetPercentage(event.startDate) + '%'\"\r\n        [style.width]=\"getEventDurationPercentage(event) + '%'\"\r\n        [style.background]=\"getColour(i)\"\r\n      >\r\n        <span class=\"event-name\">{{ event.name }}</span>\r\n        <div class=\"tooltip-text\">\r\n          <div>\r\n            <strong>{{ event.name }}: </strong>\r\n          </div>\r\n          {{ event.startDate | date : \"mediumDate\" }} -\r\n          {{ event.endDate | date : \"mediumDate\" }}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- event milestones-->\r\n      <div\r\n        class=\"event-milestone tooltip\"\r\n        *ngFor=\"let milestone of row.milestones\"\r\n        [style.margin-left]=\"getEventOffsetPercentage(milestone.date) + '%'\"\r\n      >\r\n        <i class=\"fas fa-star\"></i>\r\n        <div class=\"tooltip-text\">\r\n          <div>\r\n            <strong>{{ milestone.name }}: </strong>\r\n          </div>\r\n          {{ milestone.date | date : \"mediumDate\" }}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- gantt chart grid lines-->\r\n      <div class=\"grid-lines\">\r\n        <span\r\n          class=\"grid-line\"\r\n          *ngFor=\"let month of monthAxis\"\r\n          [style.width]=\"month.monthDurationPercentage + '%'\"\r\n        ></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxGanttChartComponent } from './ngx-gantt-chart.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { NgxGanttChartService } from './ngx-gantt-chart.service';\r\n\r\n@NgModule({\r\n  imports: [BrowserModule, CommonModule, DatePipe],\r\n  declarations: [NgxGanttChartComponent],\r\n  exports: [NgxGanttChartComponent, DatePipe],\r\n  providers: [NgxGanttChartService],\r\n})\r\nexport class NgxGanttChartModule {}\r\n","/*\r\n * Public API Surface of ngx-gantt-chart\r\n */\r\n\r\nexport * from './lib/ngx-gantt-chart.service';\r\nexport * from './lib/ngx-gantt-chart.component';\r\nexport * from './lib/ngx-gantt-chart.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}